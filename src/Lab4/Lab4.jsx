import * as S from './Lab4.module.css'
import React, { useState } from 'react'
import { InputNumber } from 'antd'
import { data } from './data.js'
import {
  calcACoefficients,
  calcCoefficientL,
  calcDeltaQ,
  calcPCoefficients, calcRefactoredValues, solveSystem,
} from './funcs.js'

const Lab4 = () => {
  const [inputs, setInputs] = useState(data)

  const handleInputChange = (id, value) => {
    const inputToUpdate = inputs.find(input => input.id === id)
    inputToUpdate.value = value
    setInputs(structuredClone(inputs))
  }

  const getInputId = (id) => {
    return inputs.find(input => input.id === id).value
  }

  const l =  getInputId('l')
  const x1 = getInputId('x1')
  const x2 = getInputId('x2')
  const x3 = getInputId('x3')
  const x4 = getInputId('x4')
  const sigma1 = getInputId('sigma1')
  const sigma2 = getInputId('sigma2')
  const sigma3 = getInputId('sigma3')
  const sigma4 = getInputId('sigma4')
  const deltaX = [getInputId('delta_x'), getInputId('delta_x'), getInputId('delta_x'), getInputId('delta_x4')]
  const coefficientL = calcCoefficientL(x1,x2,x3,x4)

  
  const isCorrect = Math.abs(coefficientL) < l;
  
  const aCoefficients = calcACoefficients(l,x1,x2,x3,x4)
  const deltaQ = calcDeltaQ(aCoefficients, x1, x2, x3, x4);
  const pCoefficients = calcPCoefficients(sigma1, sigma2, sigma3, sigma4);
  const solvedSystem = solveSystem(pCoefficients, deltaQ, coefficientL);

  
  const refactoredValues = calcRefactoredValues(x1, x2, x3, x4, solvedSystem);
  const sumRefactored = refactoredValues.reduce((acc, value) => acc + value, 0);
  return (
    <div className={S.wrapper}>
      –í—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:
      <div className={S.inputWrapper}>
        {inputs.map(({ id, name, description, value, min, max, step }) => {
          return <div key={id} className={S.inputElement}>
            <div className={S.inputName}>{name}:</div>
            <InputNumber onChange={(value) => handleInputChange(id, value)}
                         step={step} min={min} max={max}
                         value={value}/>
            <div>{description}</div>
          </div>
        })}
      </div>
      <div className={S.resultWrapper}>
        1. –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ö–∏–±–∫—É l –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–≤'—è–∑–∫—É –º—ñ–∂ –≤–∏–º—ñ—Ä—è–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: <br/>
        l: <b>{coefficientL.toFixed(4)}</b><br/> <br/>
        2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —É–º–æ–≤–∏: <br/>l {">"} l* <br/>
        {l} {">"} {coefficientL.toFixed(4)} <br/>
        {isCorrect ?
          <div>–í—Å–µ –¥–æ–±—Ä–µ</div>:
          <div>
            –û—Ç–∂–µ, —Å–µ—Ä–µ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è xÃÉi —î –Ω–µ –¥–æ—Å—Ç–æ–≤—ñ—Ä–Ω—ñ. <br/>
            3. –ó–∞–ø–∏—à–µ–º–æ –ª—ñ–Ω–µ–∞—Ä–∏–∑–æ–≤–∞–Ω—É –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—É –º–æ–¥–µ–ª—å –ø—Ä–æ—Ü–µ—Å—É, –¥–ª—è —è–∫–æ—ó –∑–Ω–∞–π–¥–µ–º–æ —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç—ñ–≤ <br/>
            A1 = <b>{aCoefficients.a1.toFixed(4)}</b> <br/>
            A2 = <b>{aCoefficients.a2.toFixed(4)}</b><br/>
            A3 = <b>{aCoefficients.a3.toFixed(4)}</b><br/>
            A4 = <b>{aCoefficients.a4.toFixed(4)}</b><br/>
            4. –ó–∞–ø–∏—à–µ–º–æ —Å–∏—Å—Ç–µ–º—É —Ä—ñ–≤–Ω—è–Ω—å –¥–ª—è —á–æ–≥–æ —Ä–æ–∑—Ä–∞—Ö—É—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É –≤–∞–≥–æ–≤—ñ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∏ —Ä: <br/>
            K = <b>{pCoefficients.k.toFixed(4)}</b><br/>
            P1 = <b>{pCoefficients.p1.toFixed(4)}</b><br/>
            P2 = <b>{pCoefficients.p2.toFixed(4)}</b><br/>
            P3 = <b>{pCoefficients.p3.toFixed(4)}</b><br/>
            P4 = <b>{pCoefficients.p4.toFixed(4)}</b><br/>
            5. –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—ñ—à–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ä—ñ–≤–Ω—è–Ω—å: <br/>
            deltaQ1 = <b>{solvedSystem[0].toFixed(4)}</b><br/>
            deltaQ2 = <b>{solvedSystem[1].toFixed(4)}</b><br/>
            deltaQ3 = <b>{solvedSystem[2].toFixed(4)}</b><br/>
            deltaQ4 = <b>{solvedSystem[3].toFixed(4)}</b><br/>
            6. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —É–º–æ–≤–∏ |Œîùë•i| ‚â§ xi*.
            {solvedSystem.map((value, index)=>{
              return <div key={index}>
                {Math.abs(value) > deltaX[index] ? 
                <div>x{index+1}: –£–º–æ–≤–∞ –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –¥–ª—è –∑–Ω–∞—á–µ–Ω–Ω—è <b>{value}</b></div>:
                <div>x{index+1}: –£–º–æ–≤–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –¥–ª—è –∑–Ω–∞—á–µ–Ω–Ω—è <b>{value}</b></div>
                }
              </div>
            })}
            <br/>
            7. –ó–∞ —Ñ–æ—Ä–º—É–ª–æ—é (4.17) —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–∫–æ—Ä–∏–≥–æ–≤–∞–Ω—ñ –æ—Ü—ñ–Ω–∫–∏ –∑–Ω–∞—á–µ–Ω—å –≤–∏–º—ñ—Ä—é–≤–∞–Ω–∏—Ö –≤–µ–ª–∏—á–∏–Ω:<br/> 
            Q1 = <b>{refactoredValues[0].toFixed(4)}</b><br/>
            Q2 = <b>{refactoredValues[1].toFixed(4)}</b><br/>
            Q3 = <b>{refactoredValues[2].toFixed(4)}</b><br/>
            Q4 = <b>{refactoredValues[3].toFixed(4)}</b><br/>
            8. –ó —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–∫–æ—Ä–∏–≥–æ–≤–∞–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –∑–Ω–æ–≤—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —É–º–æ–≤–∏:
            <b>
            {sumRefactored <= l ?
              <div>–£–º–æ–≤–∞ –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è</div>:
              <div>–£–º–æ–≤–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è</div>
            }
            </b>
            <br/>
          </div>
        }
      </div>
    </div>
  )
}

export default Lab4